package com.itertk.app.mpos.locationhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.locationhelper.AirCity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table aircities.
*/
public class AirCityDao extends AbstractDao<AirCity, String> {

    public static final String TABLENAME = "aircities";

    /**
     * Properties of entity AirCity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Code = new Property(0, String.class, "code", false, "Code");
        public final static Property Name = new Property(1, String.class, "name", true, "Name");
        public final static Property Py = new Property(2, String.class, "py", false, "Py");
        public final static Property Pyzm = new Property(3, String.class, "pyzm", false, "PYZM");
        public final static Property Count = new Property(4, int.class, "count", false, "SelectedCount");
    };


    public AirCityDao(DaoConfig config) {
        super(config);
    }
    
    public AirCityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'aircities' (" + //
                "'Code' TEXT NOT NULL ," + // 0: code
                "'Name' TEXT PRIMARY KEY NOT NULL ," + // 1: name
                "'Py' TEXT NOT NULL ," + // 2: py
                "'PYZM' TEXT NOT NULL ," + // 3: pyzm
                "'SelectedCount' INTEGER NOT NULL );"); // 4: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'aircities'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AirCity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCode());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getPy());
        stmt.bindString(4, entity.getPyzm());
        stmt.bindLong(5, entity.getCount());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public AirCity readEntity(Cursor cursor, int offset) {
        AirCity entity = new AirCity( //
            cursor.getString(offset + 0), // code
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // py
            cursor.getString(offset + 3), // pyzm
            cursor.getInt(offset + 4) // count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AirCity entity, int offset) {
        entity.setCode(cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPy(cursor.getString(offset + 2));
        entity.setPyzm(cursor.getString(offset + 3));
        entity.setCount(cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AirCity entity, long rowId) {
        return entity.getName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AirCity entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
