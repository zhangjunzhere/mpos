package com.itertk.app.mpos.locationhelper;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.itertk.app.mpos.R;
import com.itertk.app.mpos.locationhelper.TrainCityDao;
import com.itertk.app.mpos.locationhelper.AirCityDao;
import com.itertk.app.mpos.locationhelper.BankDao;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
	public static final int SCHEMA_VERSION = 1;

	/** Creates underlying database table using DAOs. */
	public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
		TrainCityDao.createTable(db, ifNotExists);
		AirCityDao.createTable(db, ifNotExists);
		BankDao.createTable(db, ifNotExists);
	}

	/** Drops underlying database table using DAOs. */
	public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
		TrainCityDao.dropTable(db, ifExists);
		AirCityDao.dropTable(db, ifExists);
		BankDao.dropTable(db, ifExists);
	}

	public static abstract class OpenHelper extends SQLiteOpenHelper {
		Context context;

		public OpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory, SCHEMA_VERSION);
			this.context = context;
			checkDbFile();
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			Log.i("greenDAO", "Creating tables for schema version "
					+ SCHEMA_VERSION);
			// createAllTables(db, false);

		}

		private void checkDbFile() {
			File file = context.getDatabasePath("lyjinfo.db");
			if (file.exists()) {
				Log.d("dbmaster",
						"lyjinfo is exist................................................................................................................");
				return;
			} else {
				Log.d("dbmaster",
						"lyjinfo not exist copy it!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
				InputStream is = context.getResources().openRawResource(
						R.raw.lyjinfo);
				FileOutputStream fileOutputStream = null;
				try {
					// file.createNewFile();
					fileOutputStream = new FileOutputStream(file);
					int len = is.available();
					byte[] data = new byte[len];
					is.read(data);
					fileOutputStream.write(data);
					fileOutputStream.flush();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
					try {
						is.close();
						if (fileOutputStream != null) {
							fileOutputStream.close();
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
	}

	/** WARNING: Drops all table on Upgrade! Use only during development. */
	public static class DevOpenHelper extends OpenHelper {
		public DevOpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory);
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Log.i("greenDAO", "Upgrading schema from version " + oldVersion
					+ " to " + newVersion + " by dropping all tables");
			dropAllTables(db, true);
			onCreate(db);
		}
	}

	public DaoMaster(SQLiteDatabase db) {
		super(db, SCHEMA_VERSION);
		registerDaoClass(TrainCityDao.class);
		registerDaoClass(AirCityDao.class);
		registerDaoClass(BankDao.class);
	}

	public DaoSession newSession() {
		return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
	}

	public DaoSession newSession(IdentityScopeType type) {
		return new DaoSession(db, type, daoConfigMap);
	}

}
