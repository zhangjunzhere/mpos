package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ClerkNo = new Property(0, Long.class, "clerkNo", true, "CLERK_NO");
        public final static Property ClerkName = new Property(1, String.class, "clerkName", false, "CLERK_NAME");
        public final static Property LoginPwd = new Property(2, String.class, "loginPwd", false, "LOGIN_PWD");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Type = new Property(4, Long.class, "type", false, "TYPE");
        public final static Property Image_url = new Property(5, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Remember_password = new Property(6, Boolean.class, "remember_password", false, "REMEMBER_PASSWORD");
        public final static Property Last_login = new Property(7, java.util.Date.class, "last_login", false, "LAST_LOGIN");
        public final static Property Last_logout = new Property(8, java.util.Date.class, "last_logout", false, "LAST_LOGOUT");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'CLERK_NO' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: clerkNo
                "'CLERK_NAME' TEXT NOT NULL UNIQUE ," + // 1: clerkName
                "'LOGIN_PWD' TEXT NOT NULL ," + // 2: loginPwd
                "'PHONE' TEXT," + // 3: phone
                "'TYPE' INTEGER," + // 4: type
                "'IMAGE_URL' TEXT," + // 5: image_url
                "'REMEMBER_PASSWORD' INTEGER," + // 6: remember_password
                "'LAST_LOGIN' INTEGER," + // 7: last_login
                "'LAST_LOGOUT' INTEGER);"); // 8: last_logout
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long clerkNo = entity.getClerkNo();
        if (clerkNo != null) {
            stmt.bindLong(1, clerkNo);
        }
        stmt.bindString(2, entity.getClerkName());
        stmt.bindString(3, entity.getLoginPwd());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        Long type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(6, image_url);
        }
 
        Boolean remember_password = entity.getRemember_password();
        if (remember_password != null) {
            stmt.bindLong(7, remember_password ? 1l: 0l);
        }
 
        java.util.Date last_login = entity.getLast_login();
        if (last_login != null) {
            stmt.bindLong(8, last_login.getTime());
        }
 
        java.util.Date last_logout = entity.getLast_logout();
        if (last_logout != null) {
            stmt.bindLong(9, last_logout.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // clerkNo
            cursor.getString(offset + 1), // clerkName
            cursor.getString(offset + 2), // loginPwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image_url
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // remember_password
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // last_login
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // last_logout
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setClerkNo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClerkName(cursor.getString(offset + 1));
        entity.setLoginPwd(cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setImage_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemember_password(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setLast_login(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setLast_logout(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setClerkNo(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getClerkNo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
