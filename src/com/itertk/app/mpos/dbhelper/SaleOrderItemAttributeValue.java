package com.itertk.app.mpos.dbhelper;

import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SALE_ORDER_ITEM_ATTRIBUTE_VALUE.
 */
public class SaleOrderItemAttributeValue {

    private Long saleOrderItemAttributeValueId;
    private long saleOrderItemId;
    private long attributeValueId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SaleOrderItemAttributeValueDao myDao;

    private SaleOrderItem saleOrderItem;
    private Long saleOrderItem__resolvedKey;

    private AttributeValue attributeValue;
    private Long attributeValue__resolvedKey;


    public SaleOrderItemAttributeValue() {
    }

    public SaleOrderItemAttributeValue(Long saleOrderItemAttributeValueId) {
        this.saleOrderItemAttributeValueId = saleOrderItemAttributeValueId;
    }

    public SaleOrderItemAttributeValue(Long saleOrderItemAttributeValueId, long saleOrderItemId, long attributeValueId) {
        this.saleOrderItemAttributeValueId = saleOrderItemAttributeValueId;
        this.saleOrderItemId = saleOrderItemId;
        this.attributeValueId = attributeValueId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSaleOrderItemAttributeValueDao() : null;
    }

    public Long getSaleOrderItemAttributeValueId() {
        return saleOrderItemAttributeValueId;
    }

    public void setSaleOrderItemAttributeValueId(Long saleOrderItemAttributeValueId) {
        this.saleOrderItemAttributeValueId = saleOrderItemAttributeValueId;
    }

    public long getSaleOrderItemId() {
        return saleOrderItemId;
    }

    public void setSaleOrderItemId(long saleOrderItemId) {
        this.saleOrderItemId = saleOrderItemId;
    }

    public long getAttributeValueId() {
        return attributeValueId;
    }

    public void setAttributeValueId(long attributeValueId) {
        this.attributeValueId = attributeValueId;
    }

    /** To-one relationship, resolved on first access. */
    public SaleOrderItem getSaleOrderItem() {
        long __key = this.saleOrderItemId;
        if (saleOrderItem__resolvedKey == null || !saleOrderItem__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleOrderItemDao targetDao = daoSession.getSaleOrderItemDao();
            SaleOrderItem saleOrderItemNew = targetDao.load(__key);
            synchronized (this) {
                saleOrderItem = saleOrderItemNew;
            	saleOrderItem__resolvedKey = __key;
            }
        }
        return saleOrderItem;
    }

    public void setSaleOrderItem(SaleOrderItem saleOrderItem) {
        if (saleOrderItem == null) {
            throw new DaoException("To-one property 'saleOrderItemId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saleOrderItem = saleOrderItem;
            saleOrderItemId = saleOrderItem.getSaleOrderItemId();
            saleOrderItem__resolvedKey = saleOrderItemId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public AttributeValue getAttributeValue() {
        long __key = this.attributeValueId;
        if (attributeValue__resolvedKey == null || !attributeValue__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AttributeValueDao targetDao = daoSession.getAttributeValueDao();
            AttributeValue attributeValueNew = targetDao.load(__key);
            synchronized (this) {
                attributeValue = attributeValueNew;
            	attributeValue__resolvedKey = __key;
            }
        }
        return attributeValue;
    }

    public void setAttributeValue(AttributeValue attributeValue) {
        if (attributeValue == null) {
            throw new DaoException("To-one property 'attributeValueId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.attributeValue = attributeValue;
            attributeValueId = attributeValue.getValueId();
            attributeValue__resolvedKey = attributeValueId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
