package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.GpsLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GPS_LOCATION.
*/
public class GpsLocationDao extends AbstractDao<GpsLocation, Void> {

    public static final String TABLENAME = "GPS_LOCATION";

    /**
     * Properties of entity GpsLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Latitude = new Property(0, String.class, "latitude", false, "LATITUDE");
        public final static Property Lontitude = new Property(1, String.class, "lontitude", false, "LONTITUDE");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
    };


    public GpsLocationDao(DaoConfig config) {
        super(config);
    }
    
    public GpsLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GPS_LOCATION' (" + //
                "'LATITUDE' TEXT NOT NULL ," + // 0: latitude
                "'LONTITUDE' TEXT NOT NULL ," + // 1: lontitude
                "'TIME' TEXT NOT NULL ," + // 2: time
                "'ADDRESS' TEXT);"); // 3: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GPS_LOCATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GpsLocation entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getLatitude());
        stmt.bindString(2, entity.getLontitude());
        stmt.bindString(3, entity.getTime());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public GpsLocation readEntity(Cursor cursor, int offset) {
        GpsLocation entity = new GpsLocation( //
            cursor.getString(offset + 0), // latitude
            cursor.getString(offset + 1), // lontitude
            cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // address
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GpsLocation entity, int offset) {
        entity.setLatitude(cursor.getString(offset + 0));
        entity.setLontitude(cursor.getString(offset + 1));
        entity.setTime(cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GpsLocation entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(GpsLocation entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
