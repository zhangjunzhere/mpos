package com.itertk.app.mpos.dbhelper;

import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PRODUCT_ATTRIBUTE.
 */
public class ProductAttribute {

    private Long productAttributeId;
    private long productId;
    private long attributeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductAttributeDao myDao;

    private Product product;
    private Long product__resolvedKey;

    private Attribute attribute;
    private Long attribute__resolvedKey;


    public ProductAttribute() {
    }

    public ProductAttribute(Long productAttributeId) {
        this.productAttributeId = productAttributeId;
    }

    public ProductAttribute(Long productAttributeId, long productId, long attributeId) {
        this.productAttributeId = productAttributeId;
        this.productId = productId;
        this.attributeId = attributeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductAttributeDao() : null;
    }

    public Long getProductAttributeId() {
        return productAttributeId;
    }

    public void setProductAttributeId(Long productAttributeId) {
        this.productAttributeId = productAttributeId;
    }

    public long getProductId() {
        return productId;
    }

    public void setProductId(long productId) {
        this.productId = productId;
    }

    public long getAttributeId() {
        return attributeId;
    }

    public void setAttributeId(long attributeId) {
        this.attributeId = attributeId;
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        long __key = this.productId;
        if (product__resolvedKey == null || !product__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        if (product == null) {
            throw new DaoException("To-one property 'productId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.product = product;
            productId = product.getId();
            product__resolvedKey = productId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Attribute getAttribute() {
        long __key = this.attributeId;
        if (attribute__resolvedKey == null || !attribute__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AttributeDao targetDao = daoSession.getAttributeDao();
            Attribute attributeNew = targetDao.load(__key);
            synchronized (this) {
                attribute = attributeNew;
            	attribute__resolvedKey = __key;
            }
        }
        return attribute;
    }

    public void setAttribute(Attribute attribute) {
        if (attribute == null) {
            throw new DaoException("To-one property 'attributeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.attribute = attribute;
            attributeId = attribute.getAttributeId();
            attribute__resolvedKey = attributeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
