package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.Bankcard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BANKCARD.
*/
public class BankcardDao extends AbstractDao<Bankcard, Long> {

    public static final String TABLENAME = "BANKCARD";

    /**
     * Properties of entity Bankcard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BankcardId = new Property(0, Long.class, "bankcardId", true, "BANKCARD_ID");
        public final static Property BankcardNo = new Property(1, String.class, "bankcardNo", false, "BANKCARD_NO");
        public final static Property CardOwnerName = new Property(2, String.class, "cardOwnerName", false, "CARD_OWNER_NAME");
    };


    public BankcardDao(DaoConfig config) {
        super(config);
    }
    
    public BankcardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BANKCARD' (" + //
                "'BANKCARD_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: bankcardId
                "'BANKCARD_NO' TEXT NOT NULL UNIQUE ," + // 1: bankcardNo
                "'CARD_OWNER_NAME' TEXT NOT NULL );"); // 2: cardOwnerName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BANKCARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bankcard entity) {
        stmt.clearBindings();
 
        Long bankcardId = entity.getBankcardId();
        if (bankcardId != null) {
            stmt.bindLong(1, bankcardId);
        }
        stmt.bindString(2, entity.getBankcardNo());
        stmt.bindString(3, entity.getCardOwnerName());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bankcard readEntity(Cursor cursor, int offset) {
        Bankcard entity = new Bankcard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bankcardId
            cursor.getString(offset + 1), // bankcardNo
            cursor.getString(offset + 2) // cardOwnerName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bankcard entity, int offset) {
        entity.setBankcardId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankcardNo(cursor.getString(offset + 1));
        entity.setCardOwnerName(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bankcard entity, long rowId) {
        entity.setBankcardId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bankcard entity) {
        if(entity != null) {
            return entity.getBankcardId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
