package com.itertk.app.mpos.dbhelper;

import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SALE_ORDER_REDUCE.
 */
public class SaleOrderReduce {

    private Long saleOrderReduceId;
    private long saleOrderId;
    private long reduceId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SaleOrderReduceDao myDao;

    private SaleOrder saleOrder;
    private Long saleOrder__resolvedKey;

    private Reduce reduce;
    private Long reduce__resolvedKey;


    public SaleOrderReduce() {
    }

    public SaleOrderReduce(Long saleOrderReduceId) {
        this.saleOrderReduceId = saleOrderReduceId;
    }

    public SaleOrderReduce(Long saleOrderReduceId, long saleOrderId, long reduceId) {
        this.saleOrderReduceId = saleOrderReduceId;
        this.saleOrderId = saleOrderId;
        this.reduceId = reduceId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSaleOrderReduceDao() : null;
    }

    public Long getSaleOrderReduceId() {
        return saleOrderReduceId;
    }

    public void setSaleOrderReduceId(Long saleOrderReduceId) {
        this.saleOrderReduceId = saleOrderReduceId;
    }

    public long getSaleOrderId() {
        return saleOrderId;
    }

    public void setSaleOrderId(long saleOrderId) {
        this.saleOrderId = saleOrderId;
    }

    public long getReduceId() {
        return reduceId;
    }

    public void setReduceId(long reduceId) {
        this.reduceId = reduceId;
    }

    /** To-one relationship, resolved on first access. */
    public SaleOrder getSaleOrder() {
        long __key = this.saleOrderId;
        if (saleOrder__resolvedKey == null || !saleOrder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleOrderDao targetDao = daoSession.getSaleOrderDao();
            SaleOrder saleOrderNew = targetDao.load(__key);
            synchronized (this) {
                saleOrder = saleOrderNew;
            	saleOrder__resolvedKey = __key;
            }
        }
        return saleOrder;
    }

    public void setSaleOrder(SaleOrder saleOrder) {
        if (saleOrder == null) {
            throw new DaoException("To-one property 'saleOrderId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.saleOrder = saleOrder;
            saleOrderId = saleOrder.getSaleOrderId();
            saleOrder__resolvedKey = saleOrderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Reduce getReduce() {
        long __key = this.reduceId;
        if (reduce__resolvedKey == null || !reduce__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReduceDao targetDao = daoSession.getReduceDao();
            Reduce reduceNew = targetDao.load(__key);
            synchronized (this) {
                reduce = reduceNew;
            	reduce__resolvedKey = __key;
            }
        }
        return reduce;
    }

    public void setReduce(Reduce reduce) {
        if (reduce == null) {
            throw new DaoException("To-one property 'reduceId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.reduce = reduce;
            reduceId = reduce.getReduceId();
            reduce__resolvedKey = reduceId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
