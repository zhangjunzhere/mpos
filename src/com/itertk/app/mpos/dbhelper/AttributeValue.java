package com.itertk.app.mpos.dbhelper;

import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ATTRIBUTE_VALUE.
 */
public class AttributeValue {

    private Long valueId;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String priceAddition;
    private long attributeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AttributeValueDao myDao;

    private Attribute attribute;
    private Long attribute__resolvedKey;


    public AttributeValue() {
    }

    public AttributeValue(Long valueId) {
        this.valueId = valueId;
    }

    public AttributeValue(Long valueId, String name, String priceAddition, long attributeId) {
        this.valueId = valueId;
        this.name = name;
        this.priceAddition = priceAddition;
        this.attributeId = attributeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAttributeValueDao() : null;
    }

    public Long getValueId() {
        return valueId;
    }

    public void setValueId(Long valueId) {
        this.valueId = valueId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getPriceAddition() {
        return priceAddition;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPriceAddition(String priceAddition) {
        this.priceAddition = priceAddition;
    }

    public long getAttributeId() {
        return attributeId;
    }

    public void setAttributeId(long attributeId) {
        this.attributeId = attributeId;
    }

    /** To-one relationship, resolved on first access. */
    public Attribute getAttribute() {
        long __key = this.attributeId;
        if (attribute__resolvedKey == null || !attribute__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AttributeDao targetDao = daoSession.getAttributeDao();
            Attribute attributeNew = targetDao.load(__key);
            synchronized (this) {
                attribute = attributeNew;
            	attribute__resolvedKey = __key;
            }
        }
        return attribute;
    }

    public void setAttribute(Attribute attribute) {
        if (attribute == null) {
            throw new DaoException("To-one property 'attributeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.attribute = attribute;
            attributeId = attribute.getAttributeId();
            attribute__resolvedKey = attributeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
