package com.itertk.app.mpos.dbhelper;

import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SALE_ORDER_ITEM_REDUCE.
 */
public class SaleOrderItemReduce {

    private Long saleOrderItemReduceId;
    private Long saleOrderItemId;
    private Long reduceId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SaleOrderItemReduceDao myDao;

    private SaleOrderItem saleOrderItem;
    private Long saleOrderItem__resolvedKey;

    private Reduce reduce;
    private Long reduce__resolvedKey;


    public SaleOrderItemReduce() {
    }

    public SaleOrderItemReduce(Long saleOrderItemReduceId) {
        this.saleOrderItemReduceId = saleOrderItemReduceId;
    }

    public SaleOrderItemReduce(Long saleOrderItemReduceId, Long saleOrderItemId, Long reduceId) {
        this.saleOrderItemReduceId = saleOrderItemReduceId;
        this.saleOrderItemId = saleOrderItemId;
        this.reduceId = reduceId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSaleOrderItemReduceDao() : null;
    }

    public Long getSaleOrderItemReduceId() {
        return saleOrderItemReduceId;
    }

    public void setSaleOrderItemReduceId(Long saleOrderItemReduceId) {
        this.saleOrderItemReduceId = saleOrderItemReduceId;
    }

    public Long getSaleOrderItemId() {
        return saleOrderItemId;
    }

    public void setSaleOrderItemId(Long saleOrderItemId) {
        this.saleOrderItemId = saleOrderItemId;
    }

    public Long getReduceId() {
        return reduceId;
    }

    public void setReduceId(Long reduceId) {
        this.reduceId = reduceId;
    }

    /** To-one relationship, resolved on first access. */
    public SaleOrderItem getSaleOrderItem() {
        Long __key = this.saleOrderItemId;
        if (saleOrderItem__resolvedKey == null || !saleOrderItem__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleOrderItemDao targetDao = daoSession.getSaleOrderItemDao();
            SaleOrderItem saleOrderItemNew = targetDao.load(__key);
            synchronized (this) {
                saleOrderItem = saleOrderItemNew;
            	saleOrderItem__resolvedKey = __key;
            }
        }
        return saleOrderItem;
    }

    public void setSaleOrderItem(SaleOrderItem saleOrderItem) {
        synchronized (this) {
            this.saleOrderItem = saleOrderItem;
            saleOrderItemId = saleOrderItem == null ? null : saleOrderItem.getSaleOrderItemId();
            saleOrderItem__resolvedKey = saleOrderItemId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Reduce getReduce() {
        Long __key = this.reduceId;
        if (reduce__resolvedKey == null || !reduce__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReduceDao targetDao = daoSession.getReduceDao();
            Reduce reduceNew = targetDao.load(__key);
            synchronized (this) {
                reduce = reduceNew;
            	reduce__resolvedKey = __key;
            }
        }
        return reduce;
    }

    public void setReduce(Reduce reduce) {
        synchronized (this) {
            this.reduce = reduce;
            reduceId = reduce == null ? null : reduce.getReduceId();
            reduce__resolvedKey = reduceId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
