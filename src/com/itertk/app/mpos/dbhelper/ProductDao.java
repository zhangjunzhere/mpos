package com.itertk.app.mpos.dbhelper;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.itertk.app.mpos.dbhelper.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT.
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Bar_code = new Property(1, String.class, "bar_code", false, "BAR_CODE");
        public final static Property Brand = new Property(2, String.class, "brand", false, "BRAND");
        public final static Property Image_url = new Property(3, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Supplier = new Property(4, String.class, "supplier", false, "SUPPLIER");
        public final static Property Prod_name = new Property(5, String.class, "prod_name", false, "PROD_NAME");
        public final static Property Standard = new Property(6, String.class, "standard", false, "STANDARD");
        public final static Property Price = new Property(7, String.class, "price", false, "PRICE");
        public final static Property Sale_price = new Property(8, String.class, "sale_price", false, "SALE_PRICE");
        public final static Property Stock = new Property(9, long.class, "stock", false, "STOCK");
        public final static Property Category_id = new Property(10, Long.class, "category_id", false, "CATEGORY_ID");
    };

    private DaoSession daoSession;

    private Query<Product> catalog_ProductListQuery;

    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'BAR_CODE' TEXT NOT NULL ," + // 1: bar_code
                "'BRAND' TEXT NOT NULL ," + // 2: brand
                "'IMAGE_URL' TEXT NOT NULL ," + // 3: image_url
                "'SUPPLIER' TEXT NOT NULL ," + // 4: supplier
                "'PROD_NAME' TEXT NOT NULL ," + // 5: prod_name
                "'STANDARD' TEXT NOT NULL ," + // 6: standard
                "'PRICE' TEXT NOT NULL ," + // 7: price
                "'SALE_PRICE' TEXT NOT NULL ," + // 8: sale_price
                "'STOCK' INTEGER NOT NULL ," + // 9: stock
                "'CATEGORY_ID' INTEGER);"); // 10: category_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getBar_code());
        stmt.bindString(3, entity.getBrand());
        stmt.bindString(4, entity.getImage_url());
        stmt.bindString(5, entity.getSupplier());
        stmt.bindString(6, entity.getProd_name());
        stmt.bindString(7, entity.getStandard());
        stmt.bindString(8, entity.getPrice());
        stmt.bindString(9, entity.getSale_price());
        stmt.bindLong(10, entity.getStock());
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(11, category_id);
        }
    }

    @Override
    protected void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // bar_code
            cursor.getString(offset + 2), // brand
            cursor.getString(offset + 3), // image_url
            cursor.getString(offset + 4), // supplier
            cursor.getString(offset + 5), // prod_name
            cursor.getString(offset + 6), // standard
            cursor.getString(offset + 7), // price
            cursor.getString(offset + 8), // sale_price
            cursor.getLong(offset + 9), // stock
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // category_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBar_code(cursor.getString(offset + 1));
        entity.setBrand(cursor.getString(offset + 2));
        entity.setImage_url(cursor.getString(offset + 3));
        entity.setSupplier(cursor.getString(offset + 4));
        entity.setProd_name(cursor.getString(offset + 5));
        entity.setStandard(cursor.getString(offset + 6));
        entity.setPrice(cursor.getString(offset + 7));
        entity.setSale_price(cursor.getString(offset + 8));
        entity.setStock(cursor.getLong(offset + 9));
        entity.setCategory_id(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "productList" to-many relationship of Catalog. */
    public List<Product> _queryCatalog_ProductList(Long category_id) {
        synchronized (this) {
            if (catalog_ProductListQuery == null) {
                QueryBuilder<Product> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Category_id.eq(null));
                catalog_ProductListQuery = queryBuilder.build();
            }
        }
        Query<Product> query = catalog_ProductListQuery.forCurrentThread();
        query.setParameter(0, category_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCatalogDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRetailDao().getAllColumns());
            builder.append(" FROM PRODUCT T");
            builder.append(" LEFT JOIN CATALOG T0 ON T.'CATEGORY_ID'=T0.'CATEGORY_ID'");
            builder.append(" LEFT JOIN RETAIL T1 ON T.'ID'=T1.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Product loadCurrentDeep(Cursor cursor, boolean lock) {
        Product entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Catalog category = loadCurrentOther(daoSession.getCatalogDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCatalogDao().getAllColumns().length;

        Retail retail = loadCurrentOther(daoSession.getRetailDao(), cursor, offset);
         if(retail != null) {
            entity.setRetail(retail);
        }

        return entity;    
    }

    public Product loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Product> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Product> list = new ArrayList<Product>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Product> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Product> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
