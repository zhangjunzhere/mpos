package com.itertk.app.mpos.dbhelper;

import java.util.List;
import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.itertk.app.mpos.utility.Arith;
import java.math.BigDecimal;
// KEEP INCLUDES END
/**
 * Entity mapped to table SALE_ORDER.
 */
public class SaleOrder {

    private Long saleOrderId;
    /** Not-null value. */
    private String saleOrderNo;
    private int payedType;
    /** Not-null value. */
    private String price;
    private long createTime;
    private long payedTime;
    private Boolean upload;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SaleOrderDao myDao;

    private List<SaleOrderReduce> saleOrderReduceList;
    private List<SaleOrderItem> saleOrderItemList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SaleOrder() {
    }

    public SaleOrder(Long saleOrderId) {
        this.saleOrderId = saleOrderId;
    }

    public SaleOrder(Long saleOrderId, String saleOrderNo, int payedType, String price, long createTime, long payedTime, Boolean upload) {
        this.saleOrderId = saleOrderId;
        this.saleOrderNo = saleOrderNo;
        this.payedType = payedType;
        this.price = price;
        this.createTime = createTime;
        this.payedTime = payedTime;
        this.upload = upload;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSaleOrderDao() : null;
    }

    public Long getSaleOrderId() {
        return saleOrderId;
    }

    public void setSaleOrderId(Long saleOrderId) {
        this.saleOrderId = saleOrderId;
    }

    /** Not-null value. */
    public String getSaleOrderNo() {
        return saleOrderNo;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSaleOrderNo(String saleOrderNo) {
        this.saleOrderNo = saleOrderNo;
    }

    public int getPayedType() {
        return payedType;
    }

    public void setPayedType(int payedType) {
        this.payedType = payedType;
    }

    /** Not-null value. */
    public String getPrice() {
        return price;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrice(String price) {
        this.price = price;
    }

    public long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(long createTime) {
        this.createTime = createTime;
    }

    public long getPayedTime() {
        return payedTime;
    }

    public void setPayedTime(long payedTime) {
        this.payedTime = payedTime;
    }

    public Boolean getUpload() {
        return upload;
    }

    public void setUpload(Boolean upload) {
        this.upload = upload;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SaleOrderReduce> getSaleOrderReduceList() {
        if (saleOrderReduceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleOrderReduceDao targetDao = daoSession.getSaleOrderReduceDao();
            List<SaleOrderReduce> saleOrderReduceListNew = targetDao._querySaleOrder_SaleOrderReduceList(saleOrderId);
            synchronized (this) {
                if(saleOrderReduceList == null) {
                    saleOrderReduceList = saleOrderReduceListNew;
                }
            }
        }
        return saleOrderReduceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSaleOrderReduceList() {
        saleOrderReduceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SaleOrderItem> getSaleOrderItemList() {
        if (saleOrderItemList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SaleOrderItemDao targetDao = daoSession.getSaleOrderItemDao();
            List<SaleOrderItem> saleOrderItemListNew = targetDao._querySaleOrder_SaleOrderItemList(saleOrderId);
            synchronized (this) {
                if(saleOrderItemList == null) {
                    saleOrderItemList = saleOrderItemListNew;
                }
            }
        }
        return saleOrderItemList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSaleOrderItemList() {
        saleOrderItemList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public BigDecimal getShihouPrice()
    {
        BigDecimal price = Arith.newBigDecimal(getPrice());
        List<SaleOrderReduce> list = getSaleOrderReduceList();
        if(list == null || list.size() ==0)
        {
            return  price;
        }
       BigDecimal shishouprice = price.subtract(Arith.newBigDecimal(list.get(0).getReduce().getValue()));
        return  shishouprice;
    }
    // KEEP METHODS END

}
