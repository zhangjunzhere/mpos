package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.Permission;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PERMISSION.
*/
public class PermissionDao extends AbstractDao<Permission, String> {

    public static final String TABLENAME = "PERMISSION";

    /**
     * Properties of entity Permission.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "NAME");
        public final static Property Order = new Property(1, Long.class, "order", false, "ORDER");
        public final static Property CategoryId = new Property(2, long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property PermissionType = new Property(3, String.class, "permissionType", false, "PERMISSION_TYPE");
        public final static Property PictureUrl = new Property(4, String.class, "pictureUrl", false, "PICTURE_URL");
    };


    public PermissionDao(DaoConfig config) {
        super(config);
    }
    
    public PermissionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PERMISSION' (" + //
                "'NAME' TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "'ORDER' INTEGER," + // 1: order
                "'CATEGORY_ID' INTEGER NOT NULL ," + // 2: categoryId
                "'PERMISSION_TYPE' TEXT," + // 3: permissionType
                "'PICTURE_URL' TEXT);"); // 4: pictureUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PERMISSION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Permission entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getName());
 
        Long order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(2, order);
        }
        stmt.bindLong(3, entity.getCategoryId());
 
        String permissionType = entity.getPermissionType();
        if (permissionType != null) {
            stmt.bindString(4, permissionType);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(5, pictureUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Permission readEntity(Cursor cursor, int offset) {
        Permission entity = new Permission( //
            cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // order
            cursor.getLong(offset + 2), // categoryId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // permissionType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pictureUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Permission entity, int offset) {
        entity.setName(cursor.getString(offset + 0));
        entity.setOrder(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCategoryId(cursor.getLong(offset + 2));
        entity.setPermissionType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPictureUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Permission entity, long rowId) {
        return entity.getName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Permission entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
