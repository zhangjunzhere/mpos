package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.System;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SYSTEM.
*/
public class SystemDao extends AbstractDao<System, Long> {

    public static final String TABLENAME = "SYSTEM";

    /**
     * Properties of entity System.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SystemId = new Property(0, Long.class, "systemId", true, "SYSTEM_ID");
        public final static Property Soft_version = new Property(1, String.class, "soft_version", false, "SOFT_VERSION");
        public final static Property Hard_version = new Property(2, String.class, "hard_version", false, "HARD_VERSION");
        public final static Property Last_update = new Property(3, long.class, "last_update", false, "LAST_UPDATE");
    };


    public SystemDao(DaoConfig config) {
        super(config);
    }
    
    public SystemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SYSTEM' (" + //
                "'SYSTEM_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: systemId
                "'SOFT_VERSION' TEXT NOT NULL ," + // 1: soft_version
                "'HARD_VERSION' TEXT NOT NULL ," + // 2: hard_version
                "'LAST_UPDATE' INTEGER NOT NULL );"); // 3: last_update
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SYSTEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, System entity) {
        stmt.clearBindings();
 
        Long systemId = entity.getSystemId();
        if (systemId != null) {
            stmt.bindLong(1, systemId);
        }
        stmt.bindString(2, entity.getSoft_version());
        stmt.bindString(3, entity.getHard_version());
        stmt.bindLong(4, entity.getLast_update());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public System readEntity(Cursor cursor, int offset) {
        System entity = new System( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // systemId
            cursor.getString(offset + 1), // soft_version
            cursor.getString(offset + 2), // hard_version
            cursor.getLong(offset + 3) // last_update
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, System entity, int offset) {
        entity.setSystemId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSoft_version(cursor.getString(offset + 1));
        entity.setHard_version(cursor.getString(offset + 2));
        entity.setLast_update(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(System entity, long rowId) {
        entity.setSystemId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(System entity) {
        if(entity != null) {
            return entity.getSystemId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
