package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.Advertising;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ADVERTISING.
*/
public class AdvertisingDao extends AbstractDao<Advertising, Long> {

    public static final String TABLENAME = "ADVERTISING";

    /**
     * Properties of entity Advertising.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Adv_id = new Property(0, long.class, "adv_id", true, "ADV_ID");
        public final static Property Order = new Property(1, Long.class, "order", false, "ORDER");
        public final static Property Value = new Property(2, String.class, "value", false, "VALUE");
    };


    public AdvertisingDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertisingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ADVERTISING' (" + //
                "'ADV_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: adv_id
                "'ORDER' INTEGER," + // 1: order
                "'VALUE' TEXT NOT NULL );"); // 2: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADVERTISING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Advertising entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAdv_id());
 
        Long order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(2, order);
        }
        stmt.bindString(3, entity.getValue());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Advertising readEntity(Cursor cursor, int offset) {
        Advertising entity = new Advertising( //
            cursor.getLong(offset + 0), // adv_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // order
            cursor.getString(offset + 2) // value
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Advertising entity, int offset) {
        entity.setAdv_id(cursor.getLong(offset + 0));
        entity.setOrder(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setValue(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Advertising entity, long rowId) {
        entity.setAdv_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Advertising entity) {
        if(entity != null) {
            return entity.getAdv_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
