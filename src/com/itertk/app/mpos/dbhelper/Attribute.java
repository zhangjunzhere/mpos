package com.itertk.app.mpos.dbhelper;

import java.util.List;
import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ATTRIBUTE.
 */
public class Attribute {

    private Long attributeId;
    /** Not-null value. */
    private String name;
    private Long choiceType;
    private Long defaultChoice;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AttributeDao myDao;

    private List<AttributeValue> attributeValueList;

    public Attribute() {
    }

    public Attribute(Long attributeId) {
        this.attributeId = attributeId;
    }

    public Attribute(Long attributeId, String name, Long choiceType, Long defaultChoice) {
        this.attributeId = attributeId;
        this.name = name;
        this.choiceType = choiceType;
        this.defaultChoice = defaultChoice;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAttributeDao() : null;
    }

    public Long getAttributeId() {
        return attributeId;
    }

    public void setAttributeId(Long attributeId) {
        this.attributeId = attributeId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getChoiceType() {
        return choiceType;
    }

    public void setChoiceType(Long choiceType) {
        this.choiceType = choiceType;
    }

    public Long getDefaultChoice() {
        return defaultChoice;
    }

    public void setDefaultChoice(Long defaultChoice) {
        this.defaultChoice = defaultChoice;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<AttributeValue> getAttributeValueList() {
        if (attributeValueList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AttributeValueDao targetDao = daoSession.getAttributeValueDao();
            List<AttributeValue> attributeValueListNew = targetDao._queryAttribute_AttributeValueList(attributeId);
            synchronized (this) {
                if(attributeValueList == null) {
                    attributeValueList = attributeValueListNew;
                }
            }
        }
        return attributeValueList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAttributeValueList() {
        attributeValueList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
