package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.Attribute;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATTRIBUTE.
*/
public class AttributeDao extends AbstractDao<Attribute, Long> {

    public static final String TABLENAME = "ATTRIBUTE";

    /**
     * Properties of entity Attribute.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AttributeId = new Property(0, Long.class, "attributeId", true, "ATTRIBUTE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ChoiceType = new Property(2, Long.class, "choiceType", false, "CHOICE_TYPE");
        public final static Property DefaultChoice = new Property(3, Long.class, "defaultChoice", false, "DEFAULT_CHOICE");
    };

    private DaoSession daoSession;


    public AttributeDao(DaoConfig config) {
        super(config);
    }
    
    public AttributeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATTRIBUTE' (" + //
                "'ATTRIBUTE_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: attributeId
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'CHOICE_TYPE' INTEGER," + // 2: choiceType
                "'DEFAULT_CHOICE' INTEGER);"); // 3: defaultChoice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATTRIBUTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attribute entity) {
        stmt.clearBindings();
 
        Long attributeId = entity.getAttributeId();
        if (attributeId != null) {
            stmt.bindLong(1, attributeId);
        }
        stmt.bindString(2, entity.getName());
 
        Long choiceType = entity.getChoiceType();
        if (choiceType != null) {
            stmt.bindLong(3, choiceType);
        }
 
        Long defaultChoice = entity.getDefaultChoice();
        if (defaultChoice != null) {
            stmt.bindLong(4, defaultChoice);
        }
    }

    @Override
    protected void attachEntity(Attribute entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Attribute readEntity(Cursor cursor, int offset) {
        Attribute entity = new Attribute( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // attributeId
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // choiceType
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // defaultChoice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attribute entity, int offset) {
        entity.setAttributeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setChoiceType(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDefaultChoice(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Attribute entity, long rowId) {
        entity.setAttributeId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Attribute entity) {
        if(entity != null) {
            return entity.getAttributeId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
