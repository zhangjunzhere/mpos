package com.itertk.app.mpos.dbhelper;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.itertk.app.mpos.dbhelper.CartItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CART_ITEM.
*/
public class CartItemDao extends AbstractDao<CartItem, Long> {

    public static final String TABLENAME = "CART_ITEM";

    /**
     * Properties of entity CartItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Supplier = new Property(1, String.class, "supplier", false, "SUPPLIER");
        public final static Property ProductId = new Property(2, long.class, "productId", false, "PRODUCT_ID");
        public final static Property ProductQuantity = new Property(3, long.class, "productQuantity", false, "PRODUCT_QUANTITY");
        public final static Property Price = new Property(4, String.class, "price", false, "PRICE");
    };

    private DaoSession daoSession;

    private Query<CartItem> cart_CartItemListQuery;

    public CartItemDao(DaoConfig config) {
        super(config);
    }
    
    public CartItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CART_ITEM' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'SUPPLIER' TEXT NOT NULL ," + // 1: supplier
                "'PRODUCT_ID' INTEGER NOT NULL ," + // 2: productId
                "'PRODUCT_QUANTITY' INTEGER NOT NULL ," + // 3: productQuantity
                "'PRICE' TEXT NOT NULL );"); // 4: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CART_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CartItem entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getSupplier());
        stmt.bindLong(3, entity.getProductId());
        stmt.bindLong(4, entity.getProductQuantity());
        stmt.bindString(5, entity.getPrice());
    }

    @Override
    protected void attachEntity(CartItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CartItem readEntity(Cursor cursor, int offset) {
        CartItem entity = new CartItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // supplier
            cursor.getLong(offset + 2), // productId
            cursor.getLong(offset + 3), // productQuantity
            cursor.getString(offset + 4) // price
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CartItem entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSupplier(cursor.getString(offset + 1));
        entity.setProductId(cursor.getLong(offset + 2));
        entity.setProductQuantity(cursor.getLong(offset + 3));
        entity.setPrice(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CartItem entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CartItem entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cartItemList" to-many relationship of Cart. */
    public List<CartItem> _queryCart_CartItemList(String supplier) {
        synchronized (this) {
            if (cart_CartItemListQuery == null) {
                QueryBuilder<CartItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Supplier.eq(null));
                cart_CartItemListQuery = queryBuilder.build();
            }
        }
        Query<CartItem> query = cart_CartItemListQuery.forCurrentThread();
        query.setParameter(0, supplier);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCartDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM CART_ITEM T");
            builder.append(" LEFT JOIN CART T0 ON T.'SUPPLIER'=T0.'SUPPLIER'");
            builder.append(" LEFT JOIN PRODUCT T1 ON T.'PRODUCT_ID'=T1.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CartItem loadCurrentDeep(Cursor cursor, boolean lock) {
        CartItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Cart cart = loadCurrentOther(daoSession.getCartDao(), cursor, offset);
         if(cart != null) {
            entity.setCart(cart);
        }
        offset += daoSession.getCartDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
         if(product != null) {
            entity.setProduct(product);
        }

        return entity;    
    }

    public CartItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CartItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CartItem> list = new ArrayList<CartItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CartItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CartItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
