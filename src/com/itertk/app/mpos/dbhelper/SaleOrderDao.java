package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.SaleOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SALE_ORDER.
*/
public class SaleOrderDao extends AbstractDao<SaleOrder, Long> {

    public static final String TABLENAME = "SALE_ORDER";

    /**
     * Properties of entity SaleOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SaleOrderId = new Property(0, Long.class, "saleOrderId", true, "SALE_ORDER_ID");
        public final static Property SaleOrderNo = new Property(1, String.class, "saleOrderNo", false, "SALE_ORDER_NO");
        public final static Property PayedType = new Property(2, int.class, "payedType", false, "PAYED_TYPE");
        public final static Property Price = new Property(3, String.class, "price", false, "PRICE");
        public final static Property CreateTime = new Property(4, long.class, "createTime", false, "CREATE_TIME");
        public final static Property PayedTime = new Property(5, long.class, "payedTime", false, "PAYED_TIME");
        public final static Property Upload = new Property(6, Boolean.class, "upload", false, "UPLOAD");
    };

    private DaoSession daoSession;


    public SaleOrderDao(DaoConfig config) {
        super(config);
    }
    
    public SaleOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SALE_ORDER' (" + //
                "'SALE_ORDER_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: saleOrderId
                "'SALE_ORDER_NO' TEXT NOT NULL ," + // 1: saleOrderNo
                "'PAYED_TYPE' INTEGER NOT NULL ," + // 2: payedType
                "'PRICE' TEXT NOT NULL ," + // 3: price
                "'CREATE_TIME' INTEGER NOT NULL ," + // 4: createTime
                "'PAYED_TIME' INTEGER NOT NULL ," + // 5: payedTime
                "'UPLOAD' INTEGER);"); // 6: upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SALE_ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SaleOrder entity) {
        stmt.clearBindings();
 
        Long saleOrderId = entity.getSaleOrderId();
        if (saleOrderId != null) {
            stmt.bindLong(1, saleOrderId);
        }
        stmt.bindString(2, entity.getSaleOrderNo());
        stmt.bindLong(3, entity.getPayedType());
        stmt.bindString(4, entity.getPrice());
        stmt.bindLong(5, entity.getCreateTime());
        stmt.bindLong(6, entity.getPayedTime());
 
        Boolean upload = entity.getUpload();
        if (upload != null) {
            stmt.bindLong(7, upload ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(SaleOrder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SaleOrder readEntity(Cursor cursor, int offset) {
        SaleOrder entity = new SaleOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // saleOrderId
            cursor.getString(offset + 1), // saleOrderNo
            cursor.getInt(offset + 2), // payedType
            cursor.getString(offset + 3), // price
            cursor.getLong(offset + 4), // createTime
            cursor.getLong(offset + 5), // payedTime
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // upload
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SaleOrder entity, int offset) {
        entity.setSaleOrderId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSaleOrderNo(cursor.getString(offset + 1));
        entity.setPayedType(cursor.getInt(offset + 2));
        entity.setPrice(cursor.getString(offset + 3));
        entity.setCreateTime(cursor.getLong(offset + 4));
        entity.setPayedTime(cursor.getLong(offset + 5));
        entity.setUpload(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SaleOrder entity, long rowId) {
        entity.setSaleOrderId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SaleOrder entity) {
        if(entity != null) {
            return entity.getSaleOrderId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
