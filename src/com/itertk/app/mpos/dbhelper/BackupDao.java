package com.itertk.app.mpos.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.itertk.app.mpos.dbhelper.Backup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BACKUP.
*/
public class BackupDao extends AbstractDao<Backup, Long> {

    public static final String TABLENAME = "BACKUP";

    /**
     * Properties of entity Backup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BackupId = new Property(0, Long.class, "backupId", true, "BACKUP_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Last_update = new Property(2, long.class, "last_update", false, "LAST_UPDATE");
    };


    public BackupDao(DaoConfig config) {
        super(config);
    }
    
    public BackupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BACKUP' (" + //
                "'BACKUP_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: backupId
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'LAST_UPDATE' INTEGER NOT NULL );"); // 2: last_update
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BACKUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Backup entity) {
        stmt.clearBindings();
 
        Long backupId = entity.getBackupId();
        if (backupId != null) {
            stmt.bindLong(1, backupId);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getLast_update());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Backup readEntity(Cursor cursor, int offset) {
        Backup entity = new Backup( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // backupId
            cursor.getString(offset + 1), // name
            cursor.getLong(offset + 2) // last_update
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Backup entity, int offset) {
        entity.setBackupId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setLast_update(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Backup entity, long rowId) {
        entity.setBackupId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Backup entity) {
        if(entity != null) {
            return entity.getBackupId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
