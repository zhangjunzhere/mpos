package com.itertk.app.mpos.dbhelper;

import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SHOP_ORDER_ITEM.
 */
public class ShopOrderItem {

    private Long _id;
    private long shopOrderId;
    private long productId;
    /** Not-null value. */
    private String totalPrice;
    private long quantity;
    /** Not-null value. */
    private String price;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ShopOrderItemDao myDao;

    private ShopOrder shopOrder;
    private Long shopOrder__resolvedKey;

    private Product product;
    private Long product__resolvedKey;


    public ShopOrderItem() {
    }

    public ShopOrderItem(Long _id) {
        this._id = _id;
    }

    public ShopOrderItem(Long _id, long shopOrderId, long productId, String totalPrice, long quantity, String price) {
        this._id = _id;
        this.shopOrderId = shopOrderId;
        this.productId = productId;
        this.totalPrice = totalPrice;
        this.quantity = quantity;
        this.price = price;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getShopOrderItemDao() : null;
    }

    public Long get_id() {
        return _id;
    }

    public void set_id(Long _id) {
        this._id = _id;
    }

    public long getShopOrderId() {
        return shopOrderId;
    }

    public void setShopOrderId(long shopOrderId) {
        this.shopOrderId = shopOrderId;
    }

    public long getProductId() {
        return productId;
    }

    public void setProductId(long productId) {
        this.productId = productId;
    }

    /** Not-null value. */
    public String getTotalPrice() {
        return totalPrice;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTotalPrice(String totalPrice) {
        this.totalPrice = totalPrice;
    }

    public long getQuantity() {
        return quantity;
    }

    public void setQuantity(long quantity) {
        this.quantity = quantity;
    }

    /** Not-null value. */
    public String getPrice() {
        return price;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrice(String price) {
        this.price = price;
    }

    /** To-one relationship, resolved on first access. */
    public ShopOrder getShopOrder() {
        long __key = this.shopOrderId;
        if (shopOrder__resolvedKey == null || !shopOrder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShopOrderDao targetDao = daoSession.getShopOrderDao();
            ShopOrder shopOrderNew = targetDao.load(__key);
            synchronized (this) {
                shopOrder = shopOrderNew;
            	shopOrder__resolvedKey = __key;
            }
        }
        return shopOrder;
    }

    public void setShopOrder(ShopOrder shopOrder) {
        if (shopOrder == null) {
            throw new DaoException("To-one property 'shopOrderId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.shopOrder = shopOrder;
            shopOrderId = shopOrder.getId();
            shopOrder__resolvedKey = shopOrderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        long __key = this.productId;
        if (product__resolvedKey == null || !product__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        if (product == null) {
            throw new DaoException("To-one property 'productId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.product = product;
            productId = product.getId();
            product__resolvedKey = productId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
