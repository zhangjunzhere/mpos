package com.itertk.app.mpos.dbhelper;

import java.util.List;
import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SHOP_ORDER.
 */
public class ShopOrder {

    private Long id;
    private String trade_no;
    /** Not-null value. */
    private String supplierId;
    /** Not-null value. */
    private java.util.Date orderDate;
    private String consigneeName;
    private String consigneePhone;
    private String consigneeAddress;
    private String paymentName;
    private String transferName;
    /** Not-null value. */
    private String totalPrice;
    private Integer totalQuantity;
    private Integer status;
    private String remark;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ShopOrderDao myDao;

    private List<ShopOrderItem> shopOrderItemList;

    public ShopOrder() {
    }

    public ShopOrder(Long id) {
        this.id = id;
    }

    public ShopOrder(Long id, String trade_no, String supplierId, java.util.Date orderDate, String consigneeName, String consigneePhone, String consigneeAddress, String paymentName, String transferName, String totalPrice, Integer totalQuantity, Integer status, String remark) {
        this.id = id;
        this.trade_no = trade_no;
        this.supplierId = supplierId;
        this.orderDate = orderDate;
        this.consigneeName = consigneeName;
        this.consigneePhone = consigneePhone;
        this.consigneeAddress = consigneeAddress;
        this.paymentName = paymentName;
        this.transferName = transferName;
        this.totalPrice = totalPrice;
        this.totalQuantity = totalQuantity;
        this.status = status;
        this.remark = remark;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getShopOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTrade_no() {
        return trade_no;
    }

    public void setTrade_no(String trade_no) {
        this.trade_no = trade_no;
    }

    /** Not-null value. */
    public String getSupplierId() {
        return supplierId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSupplierId(String supplierId) {
        this.supplierId = supplierId;
    }

    /** Not-null value. */
    public java.util.Date getOrderDate() {
        return orderDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOrderDate(java.util.Date orderDate) {
        this.orderDate = orderDate;
    }

    public String getConsigneeName() {
        return consigneeName;
    }

    public void setConsigneeName(String consigneeName) {
        this.consigneeName = consigneeName;
    }

    public String getConsigneePhone() {
        return consigneePhone;
    }

    public void setConsigneePhone(String consigneePhone) {
        this.consigneePhone = consigneePhone;
    }

    public String getConsigneeAddress() {
        return consigneeAddress;
    }

    public void setConsigneeAddress(String consigneeAddress) {
        this.consigneeAddress = consigneeAddress;
    }

    public String getPaymentName() {
        return paymentName;
    }

    public void setPaymentName(String paymentName) {
        this.paymentName = paymentName;
    }

    public String getTransferName() {
        return transferName;
    }

    public void setTransferName(String transferName) {
        this.transferName = transferName;
    }

    /** Not-null value. */
    public String getTotalPrice() {
        return totalPrice;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTotalPrice(String totalPrice) {
        this.totalPrice = totalPrice;
    }

    public Integer getTotalQuantity() {
        return totalQuantity;
    }

    public void setTotalQuantity(Integer totalQuantity) {
        this.totalQuantity = totalQuantity;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ShopOrderItem> getShopOrderItemList() {
        if (shopOrderItemList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShopOrderItemDao targetDao = daoSession.getShopOrderItemDao();
            List<ShopOrderItem> shopOrderItemListNew = targetDao._queryShopOrder_ShopOrderItemList(id);
            synchronized (this) {
                if(shopOrderItemList == null) {
                    shopOrderItemList = shopOrderItemListNew;
                }
            }
        }
        return shopOrderItemList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetShopOrderItemList() {
        shopOrderItemList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
