package com.itertk.app.mpos.dbhelper;

import java.util.List;
import com.itertk.app.mpos.dbhelper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PRODUCT.
 */
public class Product {

    private long id;
    /** Not-null value. */
    private String bar_code;
    /** Not-null value. */
    private String brand;
    /** Not-null value. */
    private String image_url;
    /** Not-null value. */
    private String supplier;
    /** Not-null value. */
    private String prod_name;
    /** Not-null value. */
    private String standard;
    /** Not-null value. */
    private String price;
    /** Not-null value. */
    private String sale_price;
    private long stock;
    private Long category_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private Catalog category;
    private Long category__resolvedKey;

    private Retail retail;
    private Long retail__resolvedKey;

    private List<ProductAttribute> productAttributeList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Product() {
    }

    public Product(long id) {
        this.id = id;
    }

    public Product(long id, String bar_code, String brand, String image_url, String supplier, String prod_name, String standard, String price, String sale_price, long stock, Long category_id) {
        this.id = id;
        this.bar_code = bar_code;
        this.brand = brand;
        this.image_url = image_url;
        this.supplier = supplier;
        this.prod_name = prod_name;
        this.standard = standard;
        this.price = price;
        this.sale_price = sale_price;
        this.stock = stock;
        this.category_id = category_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getBar_code() {
        return bar_code;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBar_code(String bar_code) {
        this.bar_code = bar_code;
    }

    /** Not-null value. */
    public String getBrand() {
        return brand;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBrand(String brand) {
        this.brand = brand;
    }

    /** Not-null value. */
    public String getImage_url() {
        return image_url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setImage_url(String image_url) {
        this.image_url = image_url;
    }

    /** Not-null value. */
    public String getSupplier() {
        return supplier;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSupplier(String supplier) {
        this.supplier = supplier;
    }

    /** Not-null value. */
    public String getProd_name() {
        return prod_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setProd_name(String prod_name) {
        this.prod_name = prod_name;
    }

    /** Not-null value. */
    public String getStandard() {
        return standard;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStandard(String standard) {
        this.standard = standard;
    }

    /** Not-null value. */
    public String getPrice() {
        return price;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrice(String price) {
        this.price = price;
    }

    /** Not-null value. */
    public String getSale_price() {
        return sale_price;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSale_price(String sale_price) {
        this.sale_price = sale_price;
    }

    public long getStock() {
        return stock;
    }

    public void setStock(long stock) {
        this.stock = stock;
    }

    public Long getCategory_id() {
        return category_id;
    }

    public void setCategory_id(Long category_id) {
        this.category_id = category_id;
    }

    /** To-one relationship, resolved on first access. */
    public Catalog getCategory() {
        Long __key = this.category_id;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CatalogDao targetDao = daoSession.getCatalogDao();
            Catalog categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Catalog category) {
        synchronized (this) {
            this.category = category;
            category_id = category == null ? null : category.getCategory_id();
            category__resolvedKey = category_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Retail getRetail() {
        long __key = this.id;
        if (retail__resolvedKey == null || !retail__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RetailDao targetDao = daoSession.getRetailDao();
            Retail retailNew = targetDao.load(__key);
            synchronized (this) {
                retail = retailNew;
            	retail__resolvedKey = __key;
            }
        }
        return retail;
    }

    public void setRetail(Retail retail) {
        if (retail == null) {
            throw new DaoException("To-one property 'id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.retail = retail;
            id = retail.getId();
            retail__resolvedKey = id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ProductAttribute> getProductAttributeList() {
        if (productAttributeList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductAttributeDao targetDao = daoSession.getProductAttributeDao();
            List<ProductAttribute> productAttributeListNew = targetDao._queryProduct_ProductAttributeList(id);
            synchronized (this) {
                if(productAttributeList == null) {
                    productAttributeList = productAttributeListNew;
                }
            }
        }
        return productAttributeList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProductAttributeList() {
        productAttributeList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public  String getLocalPrice()
    {
           Retail retail1 = getRetail();
           if(retail1 == null || retail1.getPrice() == null || retail1.getPrice().length()==0)
           {
               return getSale_price();
           }
        return  retail1.getPrice();
    }
    // KEEP METHODS END

}
